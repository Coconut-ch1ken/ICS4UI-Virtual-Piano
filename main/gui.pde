/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void toggleMetronome(GButton source, GEvent event) { //_CODE_:metro:804595:
  metronomeOn = !metronomeOn;
} //_CODE_:metro:804595:

public void changeMetronomeSpeed(GSlider source, GEvent event) { //_CODE_:metroSpeed:800338:
  bpm = metroSpeed.getValueI();
} //_CODE_:metroSpeed:800338:

public void recordButton_click(GButton source, GEvent event) { //_CODE_:recordButton:983280:
  startRecording = true;
  //recorder.beginRecord();
} //_CODE_:recordButton:983280:

public void endRecordButton_click(GButton source, GEvent event) { //_CODE_:stopRecord:494914:
  stopRecording();
  windowName = "nameSong";
} //_CODE_:stopRecord:494914:

public void savedSongsList_click(GDropList source, GEvent event) { //_CODE_:Saved_Songs:365739:
  selectedSong = Saved_Songs.getSelectedText();
  windowName = "playSong";
} //_CODE_:Saved_Songs:365739:

public void changeSongName(GTextField source, GEvent event) { //_CODE_:Song_Name:826993:
  recordingName = source.getText();
} //_CODE_:Song_Name:826993:

public void backOneSecondButton_click(GButton source, GEvent event) { //_CODE_:oneSecondBack:359539:
  println("button - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:oneSecondBack:359539:

public void pausePlayingSongButton_click(GButton source, GEvent event) { //_CODE_:pausePlayingSongButton:600804:
  println("paysePlayingSongButton - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:pausePlayingSongButton:600804:

public void forwardOneSecondButton_click(GButton source, GEvent event) { //_CODE_:oneSecondForward:727295:
  println("button3 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:oneSecondForward:727295:

public void endPlayingSongButton_click(GButton source, GEvent event) { //_CODE_:endPlayingSongButton:229623:
  println("endPlayingSongButton - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:endPlayingSongButton:229623:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  metro = new GButton(this, 41, 79, 80, 30);
  metro.setText("Toggle Metronome");
  metro.addEventHandler(this, "toggleMetronome");
  metroSpeed = new GSlider(this, 465, 79, 287, 40, 10.0);
  metroSpeed.setLimits(60, 0, 240);
  metroSpeed.setNumberFormat(G4P.INTEGER, 0);
  metroSpeed.setOpaque(false);
  metroSpeed.addEventHandler(this, "changeMetronomeSpeed");
  recordButton = new GButton(this, 657, 185, 80, 30);
  recordButton.setText("Start Record");
  recordButton.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  recordButton.addEventHandler(this, "recordButton_click");
  stopRecord = new GButton(this, 658, 227, 80, 30);
  stopRecord.setText("Stop Record");
  stopRecord.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  stopRecord.addEventHandler(this, "endRecordButton_click");
  Saved_Songs = new GDropList(this, 259, 191, 278, 80, 3, 10);
  Saved_Songs.setItems(loadStrings("list_365739"), 0);
  Saved_Songs.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  Saved_Songs.addEventHandler(this, "savedSongsList_click");
  Song_Name = new GTextField(this, 237, 265, 303, 30, G4P.SCROLLBARS_NONE);
  Song_Name.setText("Please put the name you want your song to be saved as");
  Song_Name.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  Song_Name.setOpaque(true);
  Song_Name.addEventHandler(this, "changeSongName");
  oneSecondBack = new GButton(this, 135, 322, 80, 30);
  oneSecondBack.setText("<-- 1s");
  oneSecondBack.addEventHandler(this, "backOneSecondButton_click");
  pausePlayingSongButton = new GButton(this, 277, 319, 80, 30);
  pausePlayingSongButton.setText("Pause");
  pausePlayingSongButton.addEventHandler(this, "pausePlayingSongButton_click");
  oneSecondForward = new GButton(this, 545, 319, 80, 30);
  oneSecondForward.setText("--> 1s");
  oneSecondForward.addEventHandler(this, "forwardOneSecondButton_click");
  endPlayingSongButton = new GButton(this, 405, 320, 80, 30);
  endPlayingSongButton.setText("End");
  endPlayingSongButton.addEventHandler(this, "endPlayingSongButton_click");
}

// Variable declarations 
// autogenerated do not edit
GButton metro; 
GSlider metroSpeed; 
GButton recordButton; 
GButton stopRecord; 
GDropList Saved_Songs; 
GTextField Song_Name; 
GButton oneSecondBack; 
GButton pausePlayingSongButton; 
GButton oneSecondForward; 
GButton endPlayingSongButton; 
